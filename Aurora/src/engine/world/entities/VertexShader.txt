#version 400 core

// Inputs from the VAOs
in vec3 position;
in vec2 textureCoords;
in vec3 normal;

// Outputs to the Fragment shader
out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;

// Uniform variables from Java
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];
uniform mat4 toShadowMapSpace;
uniform float useFakeLighting;
uniform float numberOfRows;
uniform vec2 offset;
uniform vec4 plane;
uniform float density;
uniform float gradient;
uniform float divider;
uniform float selected;

void main(void){
	
	// Finds a bunch of vectors that effect the color or brightness
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	
	shadowCoords = toShadowMapSpace * worldPosition;
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	
	gl_Position = projectionMatrix * positionRelativeToCam;
	
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	// Decides where or not to use fake lighting
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}
	
	// If not fake lighting, finds the angle of light
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	for(int i = 0; i < 4; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	// Calculates how much fog should show up
	float distance = length(positionRelativeToCam.xyz) / divider;
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
}